// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UploadStatus {
  pending
  completed
  failed
}

enum ProcessingStatus {
  pending
  completed
  failed
  awaiting_user_choice
  queued_for_db
}

enum AttemptType {
  kill
  wipe
}

model Logs {
  logId              Int              @id @default(autoincrement())
  fileName           String
  s3FilePath         String
  serverName         String
  uploadTimestamp    DateTime         @default(now())
  fileSize           Int
  fileType           String
  uploadStatus       UploadStatus
  processingStatus   ProcessingStatus
  structuredDataPath String?
  processedAt        DateTime?
  dbUploadCompleteAt DateTime?
  encounters         Encounter[]
  LogsMain           LogsMain?
  Pet                Pet[]
}

model Encounter {
  id        String   @id
  log       Logs     @relation(fields: [logId], references: [logId])
  logId     Int
  name      String
  bosses    Boss[]
  createdAt DateTime @default(now())
}

model Boss {
  id          String    @id
  name        String
  encounter   Encounter @relation(fields: [encounterId], references: [id])
  encounterId String
  attempts    Attempt[]
}

//v3 - architechture change
model Attempt {
  id        String       @id
  boss      Boss         @relation(fields: [bossId], references: [id])
  bossId    String
  name      String? // e.g. "Gormok (kill)"
  type      AttemptType? // New field: kill/wipe
  startTime DateTime
  endTime   DateTime

  // NEW FIELDS (safe + optional)
  startMs   BigInt?
  endMs     BigInt?
  lineStart Int?
  lineEnd   Int?

  overallDamage      Int
  overallHealing     Int
  damageByActors     Json
  healingByActors    Json
  allActors          AllActor[]
  logs               Log[]
  spellStats         SpellStatistic[]
  AttemptParticipant AttemptParticipant[]
}

// model AllActor {
//   id        Int     @id @default(autoincrement())
//   attempt   Attempt @relation(fields: [attemptId], references: [id])
//   attemptId String
//   actorName String
//   // class            String
//   // actorDamage      Int
//   // actorTotalDamage Int
//   // healing          Int
//   // pets             String[] @default([])
//   // spellList        Json
//   data      Json
// }

model AllActor {
  id               Int      @id @default(autoincrement())
  attempt          Attempt  @relation(fields: [attemptId], references: [id])
  attemptId        String
  actorName        String
  class            String? // Optional - for querying/filtering
  actorDamage      Int? // Optional - raw damage
  actorTotalDamage Int? // Optional - damage including pets
  healing          Int? // Optional - total healing
  pets             String[] @default([]) // Optional - pet names
  spellList        Json? // Optional - new detailed structure
  data             Json? // Still keep this
}

model Log {
  id         Int      @id @default(autoincrement())
  attempt    Attempt  @relation(fields: [attemptId], references: [id])
  attemptId  String
  timestamp  DateTime
  eventType  String
  sourceGUID String?
  targetGUID String?
  spellId    Int?
  spellName  String?
}

model SpellStatistic {
  id            Int     @id @default(autoincrement())
  attempt       Attempt @relation(fields: [attemptId], references: [id])
  attemptId     String
  player        Player  @relation(fields: [playerId], references: [id])
  playerId      Int
  playerName    String
  spellId       String
  spellName     String
  totalDamage   Int     @default(0)
  totalCasts    Int     @default(0)
  normalHits    Int     @default(0)
  criticalHits  Int     @default(0)
  periodicHits  Int     @default(0)
  periodicCrits Int     @default(0)
  usefulDamage  Int     @default(0)
  icon          String
}

model Player {
  id             Int                  @id @default(autoincrement())
  name           String
  class          String?
  guid           String?
  attempts       AttemptParticipant[]
  SpellStatistic SpellStatistic[]

  @@unique([guid, name])
}

model AttemptParticipant {
  id          Int     @id @default(autoincrement())
  attempt     Attempt @relation(fields: [attemptId], references: [id])
  attemptId   String
  player      Player  @relation(fields: [playerId], references: [id])
  playerId    Int
  damageDone  Int     @default(0)
  healingDone Int     @default(0)
}

model LogsMain {
  id              Int       @id @default(autoincrement())
  logId           Int       @unique
  firstEncounter  DateTime?
  playersInvolved String
  uploadStatus    String    @default("processing")
  createdAt       DateTime  @default(now())
  log             Logs      @relation(fields: [logId], references: [logId], onDelete: Cascade)
}

model Pet {
  id        String @id @default(cuid())
  logId     Int
  petGUID   String
  petName   String
  ownerGUID String
  ownerName String

  logs Logs @relation(fields: [logId], references: [logId], onDelete: Cascade)

  @@index([logId])
  @@index([petGUID])
  @@index([ownerGUID])
}
