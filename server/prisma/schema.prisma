// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UploadStatus {
  pending
  completed
  failed
}

enum ProcessingStatus {
  pending
  completed
  failed
}

model Logs {
  logId              Int              @id @default(autoincrement())
  fileName           String
  s3FilePath         String
  serverName         String
  uploadTimestamp    DateTime         @default(now())
  fileSize           Int
  fileType           String
  uploadStatus       UploadStatus
  processingStatus   ProcessingStatus
  structuredDataPath String?
  processedAt        DateTime?
  dbUploadCompleteAt DateTime?
  // New relationship to encounters
  encounters         Encounter[]
}

// New Tables for Storing Structured Data

model Encounter {
  id        String   @id
  log       Logs     @relation(fields: [logId], references: [logId])
  logId     Int
  name      String
  bosses    Boss[]
  createdAt DateTime @default(now())
}

model Boss {
  id          String    @id
  name        String
  encounter   Encounter @relation(fields: [encounterId], references: [id])
  encounterId String
  attempts    Attempt[]
}

model Attempt {
  id           String               @id
  boss         Boss                 @relation(fields: [bossId], references: [id])
  bossId       String
  startTime    DateTime
  endTime      DateTime
  totalDamage  Int
  totalHealing Int
  players      AttemptParticipant[]
  logs         Log[]
  spellStats   SpellStatistic[]
}

model Player {
  id             Int                  @id
  name           String
  class          String?
  attempts       AttemptParticipant[]
  SpellStatistic SpellStatistic[]
}

model AttemptParticipant {
  id          Int     @id @default(autoincrement())
  attempt     Attempt @relation(fields: [attemptId], references: [id])
  attemptId   String
  player      Player  @relation(fields: [playerId], references: [id])
  playerId    Int
  damageDone  Int     @default(0)
  healingDone Int     @default(0)
}

model Log {
  id         Int      @id @default(autoincrement())
  attempt    Attempt  @relation(fields: [attemptId], references: [id])
  attemptId  String
  timestamp  DateTime
  eventType  String
  sourceGUID String?
  targetGUID String?
  spellId    Int?
  spellName  String?
}

model SpellStatistic {
  id           Int     @id @default(autoincrement())
  attempt      Attempt @relation(fields: [attemptId], references: [id])
  attemptId    String
  player       Player  @relation(fields: [playerId], references: [id])
  playerId     Int
  spellId      Int
  spellName    String
  totalDamage  Int     @default(0)
  totalCasts   Int     @default(0)
  normalHits   Int     @default(0)
  criticalHits Int     @default(0)
  periodicHits Int     @default(0)
}
